/* tslint:disable */
/* eslint-disable */
/**
 * busdes kic API
 * This is busdes kic API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface NextbusGet200Response
 */
export interface NextbusGet200Response {
    /**
     * 
     * @type {Array<NextbusGet200ResponseApproachinfoInner>}
     * @memberof NextbusGet200Response
     */
    'approachinfo'?: Array<NextbusGet200ResponseApproachinfoInner>;
}
/**
 * 
 * @export
 * @interface NextbusGet200ResponseApproachinfoInner
 */
export interface NextbusGet200ResponseApproachinfoInner {
    /**
     * 後どれくらいで到着するか
     * @type {string}
     * @memberof NextbusGet200ResponseApproachinfoInner
     */
    'more_min'?: string;
    /**
     * 到着時刻
     * @type {string}
     * @memberof NextbusGet200ResponseApproachinfoInner
     */
    'real_arrival_time'?: string;
    /**
     * バスの方向
     * @type {string}
     * @memberof NextbusGet200ResponseApproachinfoInner
     */
    'direction'?: string;
    /**
     * 定時運行かを示す(kicVerではレガシー)
     * @type {string}
     * @memberof NextbusGet200ResponseApproachinfoInner
     */
    'delay'?: string;
    /**
     * バスの名前
     * @type {string}
     * @memberof NextbusGet200ResponseApproachinfoInner
     */
    'bus_name'?: string;
    /**
     * 定時の到着時刻
     * @type {string}
     * @memberof NextbusGet200ResponseApproachinfoInner
     */
    'scheduled_time'?: string;
    /**
     * バス停の情報
     * @type {string}
     * @memberof NextbusGet200ResponseApproachinfoInner
     */
    'bus_stop'?: string;
    /**
     * 目的地までの所要時間
     * @type {number}
     * @memberof NextbusGet200ResponseApproachinfoInner
     */
    'required_time'?: number;
}
/**
 * 
 * @export
 * @interface TimetableGet200Response
 */
export interface TimetableGet200Response {
    /**
     * 
     * @type {{ [key: string]: Array<TimetableMultiGet200ResponseTimetableValueWeekdaysValueInner>; }}
     * @memberof TimetableGet200Response
     */
    'weekdays'?: { [key: string]: Array<TimetableMultiGet200ResponseTimetableValueWeekdaysValueInner>; };
    /**
     * 
     * @type {{ [key: string]: Array<TimetableMultiGet200ResponseTimetableValueWeekdaysValueInner>; }}
     * @memberof TimetableGet200Response
     */
    'holidays'?: { [key: string]: Array<TimetableMultiGet200ResponseTimetableValueWeekdaysValueInner>; };
}
/**
 * 
 * @export
 * @interface TimetableMultiGet200Response
 */
export interface TimetableMultiGet200Response {
    /**
     * 
     * @type {{ [key: string]: TimetableMultiGet200ResponseTimetableValue; }}
     * @memberof TimetableMultiGet200Response
     */
    'timetable'?: { [key: string]: TimetableMultiGet200ResponseTimetableValue; };
}
/**
 * 
 * @export
 * @interface TimetableMultiGet200ResponseTimetableValue
 */
export interface TimetableMultiGet200ResponseTimetableValue {
    /**
     * 
     * @type {{ [key: string]: Array<TimetableMultiGet200ResponseTimetableValueWeekdaysValueInner>; }}
     * @memberof TimetableMultiGet200ResponseTimetableValue
     */
    'weekdays'?: { [key: string]: Array<TimetableMultiGet200ResponseTimetableValueWeekdaysValueInner>; };
    /**
     * 
     * @type {{ [key: string]: Array<TimetableMultiGet200ResponseTimetableValueWeekdaysValueInner>; }}
     * @memberof TimetableMultiGet200ResponseTimetableValue
     */
    'holidays'?: { [key: string]: Array<TimetableMultiGet200ResponseTimetableValueWeekdaysValueInner>; };
}
/**
 * 
 * @export
 * @interface TimetableMultiGet200ResponseTimetableValueWeekdaysValueInner
 */
export interface TimetableMultiGet200ResponseTimetableValueWeekdaysValueInner {
    /**
     * バスの名前
     * @type {string}
     * @memberof TimetableMultiGet200ResponseTimetableValueWeekdaysValueInner
     */
    'bus_name'?: string;
    /**
     * 到着時刻の分
     * @type {string}
     * @memberof TimetableMultiGet200ResponseTimetableValueWeekdaysValueInner
     */
    'min'?: string;
    /**
     * 乗り場
     * @type {string}
     * @memberof TimetableMultiGet200ResponseTimetableValueWeekdaysValueInner
     */
    'bus_stop'?: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns nextbus info
         * @param {string} fr Bus stop for boarding
         * @param {string} to Bus stop to get off
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nextbusGet: async (fr: string, to: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fr' is not null or undefined
            assertParamExists('nextbusGet', 'fr', fr)
            // verify required parameter 'to' is not null or undefined
            assertParamExists('nextbusGet', 'to', to)
            const localVarPath = `/nextbus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fr !== undefined) {
                localVarQueryParameter['fr'] = fr;
            }

            if (to !== undefined) {
                localVarQueryParameter['to'] = to;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns timetable
         * @param {string} fr Bus stop for boarding
         * @param {string} to Bus stop to get off
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        timetableGet: async (fr: string, to: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fr' is not null or undefined
            assertParamExists('timetableGet', 'fr', fr)
            // verify required parameter 'to' is not null or undefined
            assertParamExists('timetableGet', 'to', to)
            const localVarPath = `/timetable`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fr !== undefined) {
                localVarQueryParameter['fr'] = fr;
            }

            if (to !== undefined) {
                localVarQueryParameter['to'] = to;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns multi timetable info
         * @param {string} fr Bus stop for boarding
         * @param {string} to Bus stop to get off
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        timetableMultiGet: async (fr: string, to: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fr' is not null or undefined
            assertParamExists('timetableMultiGet', 'fr', fr)
            // verify required parameter 'to' is not null or undefined
            assertParamExists('timetableMultiGet', 'to', to)
            const localVarPath = `/timetable/multi`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fr !== undefined) {
                localVarQueryParameter['fr'] = fr;
            }

            if (to !== undefined) {
                localVarQueryParameter['to'] = to;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns nextbus info
         * @param {string} fr Bus stop for boarding
         * @param {string} to Bus stop to get off
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async nextbusGet(fr: string, to: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NextbusGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.nextbusGet(fr, to, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns timetable
         * @param {string} fr Bus stop for boarding
         * @param {string} to Bus stop to get off
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async timetableGet(fr: string, to: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TimetableGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.timetableGet(fr, to, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns multi timetable info
         * @param {string} fr Bus stop for boarding
         * @param {string} to Bus stop to get off
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async timetableMultiGet(fr: string, to: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TimetableMultiGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.timetableMultiGet(fr, to, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * Returns nextbus info
         * @param {string} fr Bus stop for boarding
         * @param {string} to Bus stop to get off
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nextbusGet(fr: string, to: string, options?: any): AxiosPromise<NextbusGet200Response> {
            return localVarFp.nextbusGet(fr, to, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns timetable
         * @param {string} fr Bus stop for boarding
         * @param {string} to Bus stop to get off
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        timetableGet(fr: string, to: string, options?: any): AxiosPromise<TimetableGet200Response> {
            return localVarFp.timetableGet(fr, to, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns multi timetable info
         * @param {string} fr Bus stop for boarding
         * @param {string} to Bus stop to get off
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        timetableMultiGet(fr: string, to: string, options?: any): AxiosPromise<TimetableMultiGet200Response> {
            return localVarFp.timetableMultiGet(fr, to, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Returns nextbus info
     * @param {string} fr Bus stop for boarding
     * @param {string} to Bus stop to get off
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public nextbusGet(fr: string, to: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).nextbusGet(fr, to, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns timetable
     * @param {string} fr Bus stop for boarding
     * @param {string} to Bus stop to get off
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public timetableGet(fr: string, to: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).timetableGet(fr, to, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns multi timetable info
     * @param {string} fr Bus stop for boarding
     * @param {string} to Bus stop to get off
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public timetableMultiGet(fr: string, to: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).timetableMultiGet(fr, to, options).then((request) => request(this.axios, this.basePath));
    }
}


