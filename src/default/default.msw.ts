/**
 * Generated by orval v6.11.1 🍺
 * Do not edit manually.
 * busdes kic API
 * This is busdes kic API
 * OpenAPI spec version: 1.0.0
 */
import {
  rest
} from 'msw'
import {
  faker
} from '@faker-js/faker'

export const getGetTimetableMultiMock = () => ({ timetable: faker.helpers.arrayElement([{ 立命館大学: faker.helpers.arrayElement([{ weekdays: faker.helpers.arrayElement([{ hour: faker.helpers.arrayElement([Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ bus_name: faker.helpers.arrayElement([faker.random.word(), undefined]), min: faker.helpers.arrayElement([faker.random.word(), undefined]), bus_stop: faker.helpers.arrayElement([faker.random.word(), undefined]) })), undefined]) }, undefined]), holiday: faker.helpers.arrayElement([{ hour: faker.helpers.arrayElement([Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ bus_name: faker.helpers.arrayElement([faker.random.word(), undefined]), min: faker.helpers.arrayElement([faker.random.word(), undefined]), bus_stop: faker.helpers.arrayElement([faker.random.word(), undefined]) })), undefined]) }, undefined]) }, undefined]) }, undefined]) })

export const getGetNextbusMock = () => ({ approachinfo: faker.helpers.arrayElement([Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ more_min: faker.helpers.arrayElement([faker.random.word(), undefined]), real_arrival_time: faker.helpers.arrayElement([faker.random.word(), undefined]), direction: faker.helpers.arrayElement([faker.random.word(), undefined]), delay: faker.helpers.arrayElement([faker.random.word(), undefined]), bus_name: faker.helpers.arrayElement([faker.random.word(), undefined]), scheduled_time: faker.helpers.arrayElement([faker.random.word(), undefined]), bus_stop: faker.helpers.arrayElement([faker.random.word(), undefined]), required_time: faker.helpers.arrayElement([faker.datatype.number({ min: undefined, max: undefined }), undefined]) })), undefined]) })

export const getGetTimetableMock = () => ({ weekdays: faker.helpers.arrayElement([{ hour: faker.helpers.arrayElement([Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ bus_name: faker.helpers.arrayElement([faker.random.word(), undefined]), min: faker.helpers.arrayElement([faker.random.word(), undefined]), bus_stop: faker.helpers.arrayElement([faker.random.word(), undefined]) })), undefined]) }, undefined]), holiday: faker.helpers.arrayElement([{ hour: faker.helpers.arrayElement([Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({ bus_name: faker.helpers.arrayElement([faker.random.word(), undefined]), min: faker.helpers.arrayElement([faker.random.word(), undefined]), bus_stop: faker.helpers.arrayElement([faker.random.word(), undefined]) })), undefined]) }, undefined]) })

export const getDefaultMSW = () => [
  rest.get('*/timetable/multi', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getGetTimetableMultiMock()),
    )
  }), rest.get('*/nextbus', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getGetNextbusMock()),
    )
  }), rest.get('*/timetable', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getGetTimetableMock()),
    )
  }),]
